version: "3.9"

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.${NODE_ENV}
    container_name: frontend
    working_dir: /app
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - frontend-dist:/app/dist
    ports:
      - "5173:5173"
    environment:
      - CHOKIDAR_USEPOLLING=true
      - NODE_ENV=${NODE_ENV}
    tty: true
    stdin_open: true
    env_file:
      - .env
    mem_limit: 2g
    memswap_limit: 2g
    mem_reservation: 1g
    networks:
    - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.${APP_ENV}
    container_name: backend_app
    ports:
      - "8080:8080"
    depends_on:
      - db
    networks:
      - app-network
    volumes: []
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      FLYWAY_ENABLED: ${FLYWAY_ENABLED}
    mem_limit: 2g
    memswap_limit: 2g
    mem_reservation: 1g

  db:
    image: postgres:15
    container_name: db
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network
    mem_limit: 2g
    memswap_limit: 2g
    mem_reservation: 1g

  nginx:
    build:
      context: ./nginx
      args:
        - APP_ENV=${APP_ENV}
    container_name: nginx
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.${APP_ENV}.conf:/etc/nginx/conf.d/default.conf
      - frontend-dist:/usr/share/nginx/html
      - /etc/letsencrypt:/etc/letsencrypt:ro 

volumes:
  pgdata:
  frontend-dist:

networks:
  app-network:
    driver: bridge
